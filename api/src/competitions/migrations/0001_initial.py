# Generated by Django 4.2.23 on 2025-08-30 22:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('date', models.DateField(verbose_name='date')),
                ('time', models.TimeField(verbose_name='time')),
                ('timezone', models.CharField(max_length=50, verbose_name='timezone')),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed'), ('RESOLVED', 'Resolved')], default='OPEN', help_text='The current status of the competition.', max_length=10, verbose_name='status')),
            ],
            options={
                'verbose_name': 'competition',
                'verbose_name_plural': 'competitions',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'sport',
                'verbose_name_plural': 'sports',
            },
        ),
        migrations.CreateModel(
            name='UserScore',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('points', models.PositiveIntegerField(default=0, help_text="The user's current point balance.", verbose_name='points')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='score', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user score',
                'verbose_name_plural': 'user scores',
            },
        ),
        migrations.CreateModel(
            name='UserCredit',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('balance', models.PositiveIntegerField(default=0, help_text="The user's current credit balance.", verbose_name='balance')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user credit',
                'verbose_name_plural': 'user credits',
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_prizes', to=settings.AUTH_USER_MODEL, verbose_name='winner')),
            ],
            options={
                'verbose_name': 'prize',
                'verbose_name_plural': 'prizes',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('initials', models.CharField(max_length=10, verbose_name='initials')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='competitions.sport', verbose_name='sport')),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
            },
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competitions.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'group member',
                'verbose_name_plural': 'group members',
                'unique_together': {('group', 'user')},
            },
        ),
        migrations.CreateModel(
            name='GroupCompetition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_competitions', to='competitions.competition', verbose_name='competition')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_competitions', to='competitions.group', verbose_name='group')),
            ],
            options={
                'verbose_name': 'group competition',
                'verbose_name_plural': 'group competitions',
            },
        ),
        migrations.AddField(
            model_name='group',
            name='competitions',
            field=models.ManyToManyField(related_name='groups', through='competitions.GroupCompetition', to='competitions.competition', verbose_name='competitions'),
        ),
        migrations.AddField(
            model_name='group',
            name='creator',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='group', to=settings.AUTH_USER_MODEL, verbose_name='creator'),
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(related_name='memberships', through='competitions.GroupMember', to=settings.AUTH_USER_MODEL, verbose_name='members'),
        ),
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('wins', models.PositiveIntegerField(default=0, verbose_name='wins')),
                ('losses', models.PositiveIntegerField(default=0, verbose_name='losses')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitors', to='competitions.organization', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'competitor',
                'verbose_name_plural': 'competitors',
            },
        ),
        migrations.CreateModel(
            name='CompetitionOutcome',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('points_value', models.PositiveIntegerField(default=10, help_text='The number of points awarded for a correct prediction.', verbose_name='points value')),
                ('credit_cost', models.PositiveIntegerField(default=1, help_text='The number of credits required to make this prediction.', verbose_name='credit cost')),
                ('credit_prize', models.PositiveIntegerField(default=0, help_text='The number of credits awarded for a correct prediction.', verbose_name='credit prize')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outcomes', to='competitions.competition', verbose_name='competition')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='competition_outcomes', to='competitions.group', verbose_name='group')),
            ],
            options={
                'verbose_name': 'competition outcome',
                'verbose_name_plural': 'competition outcomes',
                'unique_together': {('competition', 'name')},
            },
        ),
        migrations.AddField(
            model_name='competition',
            name='competitors',
            field=models.ManyToManyField(blank=True, related_name='competitions', to='competitions.competitor', verbose_name='competitors'),
        ),
        migrations.AddField(
            model_name='competition',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions', to='competitions.organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='competition',
            name='sport',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions', to='competitions.sport', verbose_name='sport'),
        ),
        migrations.AddField(
            model_name='competition',
            name='winning_outcome',
            field=models.ForeignKey(blank=True, help_text='The winning outcome of the competition. Only set when status is RESOLVED.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='winning_competitions', to='competitions.competitionoutcome', verbose_name='winning outcome'),
        ),
        migrations.CreateModel(
            name='UserPrediction',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('points_awarded', models.IntegerField(default=0, verbose_name='points awarded')),
                ('credit_cost', models.PositiveIntegerField(default=0, help_text='The number of credits spent on this prediction.', verbose_name='credit cost')),
                ('credits_awarded', models.PositiveIntegerField(default=0, help_text='The number of credits awarded for this prediction.', verbose_name='credits awarded')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CORRECT', 'Correct'), ('INCORRECT', 'Incorrect'), ('CANCELLED', 'Cancelled')], default='PENDING', help_text="The status of the user's prediction.", max_length=10, verbose_name='status')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_predictions', to='competitions.competition', verbose_name='competition')),
                ('predicted_outcome', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_predictions', to='competitions.competitionoutcome', verbose_name='predicted outcome')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user prediction',
                'verbose_name_plural': 'user predictions',
                'unique_together': {('user', 'competition')},
            },
        ),
    ]
